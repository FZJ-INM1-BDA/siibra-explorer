/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/atlases": {
    /** Get All Atlases */
    get: operations["get_all_atlases_atlases_get"]
  }
  "/atlases/{atlas_id}": {
    /** Get Single Atlas */
    get: operations["get_single_atlas_atlases__atlas_id__get"]
  }
  "/spaces": {
    /** Get All Spaces */
    get: operations["get_all_spaces_spaces_get"]
  }
  "/spaces/{space_id}": {
    /** Get Single Space */
    get: operations["get_single_space_spaces__space_id__get"]
  }
  "/parcellations": {
    /** Get All Parcellations */
    get: operations["get_all_parcellations_parcellations_get"]
  }
  "/parcellations/{parcellation_id}": {
    /** Get Single Parcellation */
    get: operations["get_single_parcellation_parcellations__parcellation_id__get"]
  }
  "/regions": {
    /** Get All Regions */
    get: operations["get_all_regions_regions_get"]
  }
  "/regions/{region_id}": {
    /** Get All Regions */
    get: operations["get_all_regions_regions__region_id__get"]
  }
  "/map": {
    /** Route Get Map */
    get: operations["route_get_map_map_get"]
  }
  "/map/labelled_map.nii.gz": {
    /**
     * Route Get Parcellation Labelled Map 
     * @description Returns a labelled map if region_id is not provided.
     * 
     * Returns a mask if a region_id is provided.
     * 
     * region_id MAY refer to ANY region on the region hierarchy, and a combined mask will be returned.
     */
    get: operations["route_get_parcellation_labelled_map_map_labelled_map_nii_gz_get"]
  }
  "/map/statistical_map.nii.gz": {
    /**
     * Route Get Region Statistical Map 
     * @description Returns a statistic map.
     * 
     * region_id MUST refer to leaf region on the region hierarchy.
     */
    get: operations["route_get_region_statistical_map_map_statistical_map_nii_gz_get"]
  }
  "/map/statistical_map.info.json": {
    /** Route Get Region Statistical Map */
    get: operations["route_get_region_statistical_map_map_statistical_map_info_json_get"]
  }
  "/feature/_types": {
    /** Get All Feature Types */
    get: operations["get_all_feature_types_feature__types_get"]
  }
  "/feature/RegionalConnectivity": {
    /** Get All Connectivity Features */
    get: operations["get_all_connectivity_features_feature_RegionalConnectivity_get"]
  }
  "/feature/RegionalConnectivity/{feature_id}": {
    /**
     * Get Single Connectivity Feature 
     * @description subject is an optional param.
     * If provided, the specific matrix will be return.
     * If not provided, the matrix averaged between subjects will be returned under the key _average.
     */
    get: operations["get_single_connectivity_feature_feature_RegionalConnectivity__feature_id__get"]
  }
  "/feature/CorticalProfile": {
    /** Get All Connectivity Features */
    get: operations["get_all_connectivity_features_feature_CorticalProfile_get"]
  }
  "/feature/CorticalProfile/{feature_id}": {
    /** Get Single Connectivity Feature */
    get: operations["get_single_connectivity_feature_feature_CorticalProfile__feature_id__get"]
  }
  "/feature/Tabular": {
    /** Get All Tabular */
    get: operations["get_all_tabular_feature_Tabular_get"]
  }
  "/feature/Tabular/{feature_id}": {
    /** Get Single Tabular */
    get: operations["get_single_tabular_feature_Tabular__feature_id__get"]
  }
  "/feature/Image": {
    /** Get All Voi */
    get: operations["get_all_voi_feature_Image_get"]
  }
  "/feature/Image/{feature_id}": {
    /** Get Single Voi */
    get: operations["get_single_voi_feature_Image__feature_id__get"]
  }
  "/feature/GeneExpressions": {
    /** Get All Gene */
    get: operations["get_all_gene_feature_GeneExpressions_get"]
  }
  "/feature/GeneExpressions/{feature_id}": {
    /** Get Single Gene */
    get: operations["get_single_gene_feature_GeneExpressions__feature_id__get"]
  }
  "/feature/EbrainsDataFeature": {
    /** Get All Ebrains Df */
    get: operations["get_all_ebrains_df_feature_EbrainsDataFeature_get"]
  }
  "/feature/EbrainsDataFeature/{feature_id}": {
    /** Get Single Ebrains Df */
    get: operations["get_single_ebrains_df_feature_EbrainsDataFeature__feature_id__get"]
  }
  "/feature/{feature_id}": {
    /**
     * Get Single Feature 
     * @description This endpoint allows detail of a single feature to be fetched, without the necessary context. However, the tradeoff for this endpoint is:
     * 
     * - the endpoint typing is the union of all possible return types
     * - the client needs to supply any necessary query param (e.g. subject for regional connectivity, gene for gene expression etc)
     */
    get: operations["get_single_feature_feature__feature_id__get"]
  }
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** AxesOrigin */
    AxesOrigin: {
      /**
       * @Context 
       * @default {
       *   "@vocab": "https://openminds.ebrains.eu/vocab/"
       * }
       */
      "@context"?: components["schemas"]["VocabModel"]
      /**
       * typeOfUncertainty 
       * @description Distinct technique used to quantify the uncertainty of a measurement.
       */
      typeOfUncertainty?: Record<string, never>
      /**
       * uncertainty 
       * @description Quantitative value range defining the uncertainty of a measurement.
       */
      uncertainty?: (number)[]
      /**
       * unit 
       * @description Determinate quantity adopted as a standard of measurement.
       */
      unit?: Record<string, never>
      /**
       * value 
       * @description Entry for a property.
       */
      value: number
    }
    /** BestViewPoint */
    BestViewPoint: {
      /**
       * @Context 
       * @default {
       *   "@vocab": "https://openminds.ebrains.eu/vocab/"
       * }
       */
      "@context"?: components["schemas"]["VocabModel"]
      /**
       * coordinateSpace 
       * @description Two or three dimensional geometric setting.
       */
      coordinateSpace: Record<string, never>
      /**
       * Coordinates 
       * @description Structured information on a quantitative value.
       */
      coordinates: (components["schemas"]["api__models__openminds__SANDS__v3__atlas__parcellationEntityVersion__Coordinates"])[]
    }
    /** BoundingBoxModel */
    BoundingBoxModel: {
      /** @Type */
      "@type": string
      space: components["schemas"]["SiibraAtIdModel"]
      center: components["schemas"]["CoordinatePointModel"]
      minpoint: components["schemas"]["CoordinatePointModel"]
      maxpoint: components["schemas"]["CoordinatePointModel"]
      /** Shape */
      shape: (number)[]
      /** Isplanar */
      isPlanar: boolean
    }
    /** BrainAtlasVersionModel */
    BrainAtlasVersionModel: {
      /** @Type */
      "@type": string
      /**
       * @Context 
       * @default {
       *   "@vocab": "https://openminds.ebrains.eu/vocab/"
       * }
       */
      "@context"?: components["schemas"]["VocabModel"]
      /**
       * @Id 
       * @description Metadata node identifier.
       */
      "@id": string
      /** abbreviation */
      abbreviation?: string
      /**
       * accessibility 
       * @description Level to which something is accessible to someone or something.
       */
      accessibility: Record<string, never>
      /** atlasType */
      atlasType?: Record<string, never>
      /**
       * author 
       * @description Creator of a literary or creative work, as well as a dataset publication.
       */
      author?: (Record<string, never>)[]
      /**
       * coordinateSpace 
       * @description Two or three dimensional geometric setting.
       */
      coordinateSpace: Record<string, never>
      /**
       * Copyright 
       * @description Structured information on the copyright.
       */
      copyright?: components["schemas"]["Copyright"]
      /**
       * custodian 
       * @description The 'custodian' is a legal person who is responsible for the content and quality of the data, metadata, and/or code of a research product.
       */
      custodian?: (Record<string, never>)[]
      /**
       * description 
       * @description Longer statement or account giving the characteristics of someone or something.
       */
      description?: string
      /**
       * digitalIdentifier 
       * @description Digital handle to identify objects or legal persons.
       */
      digitalIdentifier?: Record<string, never>
      /**
       * fullDocumentation 
       * @description Non-abridged instructions, comments, and information for using a particular product.
       */
      fullDocumentation: Record<string, never>
      /**
       * fullName 
       * @description Whole, non-abbreviated name of something or somebody.
       */
      fullName?: string
      /**
       * funding 
       * @description Money provided by a legal person for a particular purpose.
       */
      funding?: (Record<string, never>)[]
      hasTerminologyVersion: components["schemas"]["HasTerminologyVersion"]
      /**
       * homepage 
       * @description Main website of something or someone.
       */
      homepage?: Record<string, never>
      /**
       * howToCite 
       * @description Preferred format for citing a particular object or legal person.
       */
      howToCite?: string
      /**
       * isAlternativeVersionOf 
       * @description Reference to an original form where the essence was preserved, but presented in an alternative form.
       */
      isAlternativeVersionOf?: (Record<string, never>)[]
      /**
       * isNewVersionOf 
       * @description Reference to a previous (potentially outdated) particular form of something.
       */
      isNewVersionOf?: Record<string, never>
      /**
       * keyword 
       * @description Significant word or concept that are representative of something or someone.
       */
      keyword?: (Record<string, never>)[]
      /**
       * license 
       * @description Grant by a party to another party as an element of an agreement between those parties that permits to do, use, or own something.
       */
      license: Record<string, never>
      /**
       * ontologyIdentifier 
       * @description Term or code used to identify something or someone registered within a particular ontology.
       */
      ontologyIdentifier?: (string)[]
      /**
       * Othercontribution 
       * @description Structured information on the contribution made to a research product.
       */
      otherContribution?: components["schemas"]["OtherContribution"]
      /**
       * relatedPublication 
       * @description Reference to something that was made available for the general public to see or buy.
       */
      relatedPublication?: (Record<string, never>)[]
      /**
       * releaseDate 
       * @description Fixed date on which a product is due to become or was made available for the general public to see or buy
       */
      releaseDate: string
      /**
       * repository 
       * @description Place, room, or container where something is deposited or stored.
       */
      repository?: Record<string, never>
      /**
       * shortName 
       * @description Shortened or fully abbreviated name of something or somebody.
       */
      shortName: string
      /**
       * supportChannel 
       * @description Way of communication used to interact with users or customers.
       */
      supportChannel?: (string)[]
      /**
       * versionIdentifier 
       * @description Term or code used to identify the version of something.
       */
      versionIdentifier: string
      /**
       * versionInnovation 
       * @description Documentation on what changed in comparison to a previously published form of something.
       */
      versionInnovation: string
    }
    /** CommonCoordinateSpaceModel */
    CommonCoordinateSpaceModel: {
      /** @Type */
      "@type": string
      /**
       * @Context 
       * @default {
       *   "@vocab": "https://openminds.ebrains.eu/vocab/"
       * }
       */
      "@context"?: components["schemas"]["VocabModel"]
      /**
       * @Id 
       * @description Metadata node identifier.
       */
      "@id": string
      /**
       * anatomicalAxesOrientation 
       * @description Relation between reference planes used in anatomy and mathematics.
       */
      anatomicalAxesOrientation: Record<string, never>
      /**
       * Axesorigin 
       * @description Structured information on a quantitative value.
       */
      axesOrigin: (components["schemas"]["AxesOrigin"])[]
      /**
       * defaultImage 
       * @description Two or three dimensional image that particluarly represents a specific coordinate space. Overriden by Siibra API to use as VolumeModel
       */
      defaultImage?: (components["schemas"]["VolumeModel"])[]
      /**
       * digitalIdentifier 
       * @description Digital handle to identify objects or legal persons.
       */
      digitalIdentifier?: Record<string, never>
      /**
       * fullName 
       * @description Whole, non-abbreviated name of something or somebody.
       */
      fullName: string
      /**
       * homepage 
       * @description Main website of something or someone.
       */
      homepage?: Record<string, never>
      /**
       * howToCite 
       * @description Preferred format for citing a particular object or legal person.
       */
      howToCite?: string
      /**
       * nativeUnit 
       * @description Determinate quantity used in the original measurement.
       */
      nativeUnit: Record<string, never>
      /**
       * ontologyIdentifier 
       * @description Term or code used to identify something or someone registered within a particular ontology.
       */
      ontologyIdentifier?: (string)[]
      /**
       * releaseDate 
       * @description Fixed date on which a product is due to become or was made available for the general public to see or buy
       */
      releaseDate: string
      /**
       * shortName 
       * @description Shortened or fully abbreviated name of something or somebody.
       */
      shortName: string
      /**
       * versionIdentifier 
       * @description Term or code used to identify the version of something.
       */
      versionIdentifier: string
    }
    /**
     * ConnectivityTypes 
     * @description An enumeration. 
     * @enum {unknown}
     */
    ConnectivityTypes: "FunctionalConnectivity" | "StreamlineCounts" | "StreamlineLengths"
    /** CoordinatePointModel */
    CoordinatePointModel: {
      /** @Type */
      "@type": string
      /**
       * @Context 
       * @default {
       *   "@vocab": "https://openminds.ebrains.eu/vocab/"
       * }
       */
      "@context"?: components["schemas"]["VocabModel"]
      /**
       * @Id 
       * @description Metadata node identifier.
       */
      "@id": string
      /**
       * coordinateSpace 
       * @description Two or three dimensional geometric setting.
       */
      coordinateSpace: Record<string, never>
      /**
       * Coordinates 
       * @description Structured information on a quantitative value.
       */
      coordinates: (components["schemas"]["api__models__openminds__SANDS__v3__miscellaneous__coordinatePoint__Coordinates"])[]
    }
    /** Copyright */
    Copyright: {
      /**
       * @Context 
       * @default {
       *   "@vocab": "https://openminds.ebrains.eu/vocab/"
       * }
       */
      "@context"?: components["schemas"]["VocabModel"]
      /**
       * holder 
       * @description Legal person in possession of something.
       */
      holder: (Record<string, never>)[]
      /**
       * year 
       * @description Cycle in the Gregorian calendar specified by a number and comprised of 365 or 366 days divided into 12 months beginning with January and ending with December.
       */
      year: string
    }
    /**
     * CorticalProfileTypes 
     * @description An enumeration. 
     * @enum {unknown}
     */
    CorticalProfileTypes: "ReceptorDensityProfile" | "CellDensityProfile" | "BigBrainIntensityProfile"
    /** DataFrameModel */
    DataFrameModel: {
      /** @Type */
      "@type": string
      /** Index */
      index: string[]
      /** Dtype */
      dtype: string
      /** Columns */
      columns: string[]
      /** Ndim */
      ndim: number
      /** Data */
      data: ((number | string | (number)[])[])[]
    }
    /** EbrainsDatasetModel */
    EbrainsDatasetModel: {
      /** @Type */
      "@type": string
      /** @Id */
      "@id": string
      /** Name */
      name: string
      /** Urls */
      urls: (components["schemas"]["EbrainsDsUrl"])[]
      /** Description */
      description: string
      /** Contributors */
      contributors: (components["schemas"]["EbrainsDsPerson"])[]
      /** Ebrains Page */
      ebrains_page: string
      /** Custodians */
      custodians: (components["schemas"]["EbrainsDsPerson"])[]
    }
    /** EbrainsDsPerson */
    EbrainsDsPerson: {
      /** @Type */
      "@type": string
      /** @Id */
      "@id": string
      /** Schema.Org/Shortname */
      "schema.org/shortName": string
      /** Identifier */
      identifier: string
      /** Shortname */
      shortName: string
      /** Name */
      name: string
    }
    /** EbrainsDsUrl */
    EbrainsDsUrl: {
      /** @Type */
      "@type": string
      /** Url */
      url: string
    }
    /** FeatureMetaModel */
    FeatureMetaModel: {
      /** Name */
      name: string
      /** Display Name */
      display_name: string
      /** Path */
      path?: string
      /** Query Params */
      query_params?: (string)[]
      /** Required Query Params */
      required_query_params?: (string)[]
      /** Optional Query Params */
      optional_query_params?: (string)[]
      /** Path Params */
      path_params?: (string)[]
      /** Category */
      category?: string
    }
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: (components["schemas"]["ValidationError"])[]
    }
    /** HasAnnotation */
    HasAnnotation: {
      /**
       * @Context 
       * @default {
       *   "@vocab": "https://openminds.ebrains.eu/vocab/"
       * }
       */
      "@context"?: components["schemas"]["VocabModel"]
      /**
       * Bestviewpoint 
       * @description Structured information on a coordinate point.
       */
      bestViewPoint?: components["schemas"]["BestViewPoint"]
      /**
       * criteria 
       * @description Aspects or standards on which a judgement or decision is based.
       */
      criteria?: Record<string, never>
      /**
       * criteriaQualityType 
       * @description Distinct class that defines how the judgement or decision was made for a particular criteria.
       */
      criteriaQualityType: Record<string, never>
      /**
       * displayColor 
       * @description Preferred coloring.
       */
      displayColor?: string
      /**
       * inspiredBy 
       * @description Reference to an inspiring element.
       */
      inspiredBy?: (Record<string, never>)[]
      /**
       * internalIdentifier 
       * @description Term or code that identifies someone or something within a particular product.
       */
      internalIdentifier: string
      /**
       * laterality 
       * @description Differentiation between a pair of lateral homologous parts of the body.
       */
      laterality?: (Record<string, never>)[]
      /**
       * visualizedIn 
       * @description Reference to an image in which something is visible.
       */
      visualizedIn?: Record<string, never>
    }
    /** HasTerminologyVersion */
    HasTerminologyVersion: {
      /**
       * @Context 
       * @default {
       *   "@vocab": "https://openminds.ebrains.eu/vocab/"
       * }
       */
      "@context"?: components["schemas"]["VocabModel"]
      /**
       * definedIn 
       * @description Reference to a file instance in which something is stored.
       */
      definedIn?: (Record<string, never>)[]
      /** hasEntityVersion */
      hasEntityVersion: (Record<string, never>)[]
      /**
       * ontologyIdentifier 
       * @description Term or code used to identify something or someone registered within a particular ontology.
       */
      ontologyIdentifier?: (string)[]
    }
    /**
     * ImageTypes 
     * @description An enumeration. 
     * @enum {unknown}
     */
    ImageTypes: "BlockfaceVolumeOfInterest" | "CellBodyStainedVolumeOfInterest" | "CellbodyStainedSection" | "MRIVolumeOfInterest" | "PLIVolumeOfInterest" | "SegmentedVolumeOfInterest"
    /** LocationModel */
    LocationModel: {
      /** @Type */
      "@type": string
      space: components["schemas"]["SiibraAtIdModel"]
    }
    /** MapIndexModel */
    MapIndexModel: {
      /** @Type */
      "@type": string
      /** Volume */
      volume: number
      /** Label */
      label?: number
      /** Fragment */
      fragment?: string
    }
    /** MapModel */
    MapModel: {
      /** @Type */
      "@type": string
      /** @Id */
      "@id": string
      /** Name */
      name: string
      /** Shortname */
      shortname?: string
      /** Modality */
      modality?: string
      /** Description */
      description?: string
      /** Publications */
      publications: (components["schemas"]["SiibraPublication"])[]
      /** Datasets */
      datasets: (components["schemas"]["EbrainsDatasetModel"])[]
      /** Species */
      species: string
      /** Indices */
      indices: {
        [key: string]: (components["schemas"]["MapIndexModel"])[] | undefined
      }
      /** Volumes */
      volumes: (components["schemas"]["VolumeModel"])[]
    }
    /**
     * MapType 
     * @description An enumeration. 
     * @enum {string}
     */
    MapType: "LABELLED" | "STATISTICAL"
    /** OtherContribution */
    OtherContribution: {
      /**
       * @Context 
       * @default {
       *   "@vocab": "https://openminds.ebrains.eu/vocab/"
       * }
       */
      "@context"?: components["schemas"]["VocabModel"]
      /**
       * contributionType 
       * @description Distinct class of what was given or supplied as a part or share.
       */
      contributionType: (Record<string, never>)[]
      /**
       * contributor 
       * @description Legal person that gave or supplied something as a part or share.
       */
      contributor: Record<string, never>
    }
    /** Page[CommonCoordinateSpaceModel] */
    Page_CommonCoordinateSpaceModel_: {
      /** Items */
      items: (components["schemas"]["CommonCoordinateSpaceModel"])[]
      /** Total */
      total: number
      /** Page */
      page: number
      /** Size */
      size: number
      /** Pages */
      pages?: number
    }
    /** Page[FeatureMetaModel] */
    Page_FeatureMetaModel_: {
      /** Items */
      items: (components["schemas"]["FeatureMetaModel"])[]
      /** Total */
      total: number
      /** Page */
      page: number
      /** Size */
      size: number
      /** Pages */
      pages?: number
    }
    /** Page[ParcellationEntityVersionModel] */
    Page_ParcellationEntityVersionModel_: {
      /** Items */
      items: (components["schemas"]["ParcellationEntityVersionModel"])[]
      /** Total */
      total: number
      /** Page */
      page: number
      /** Size */
      size: number
      /** Pages */
      pages?: number
    }
    /** Page[SiibraAtlasModel] */
    Page_SiibraAtlasModel_: {
      /** Items */
      items: (components["schemas"]["SiibraAtlasModel"])[]
      /** Total */
      total: number
      /** Page */
      page: number
      /** Size */
      size: number
      /** Pages */
      pages?: number
    }
    /** Page[SiibraCorticalProfileModel] */
    Page_SiibraCorticalProfileModel_: {
      /** Items */
      items: (components["schemas"]["SiibraCorticalProfileModel"])[]
      /** Total */
      total: number
      /** Page */
      page: number
      /** Size */
      size: number
      /** Pages */
      pages?: number
    }
    /** Page[SiibraEbrainsDataFeatureModel] */
    Page_SiibraEbrainsDataFeatureModel_: {
      /** Items */
      items: (components["schemas"]["SiibraEbrainsDataFeatureModel"])[]
      /** Total */
      total: number
      /** Page */
      page: number
      /** Size */
      size: number
      /** Pages */
      pages?: number
    }
    /** Page[SiibraParcellationModel] */
    Page_SiibraParcellationModel_: {
      /** Items */
      items: (components["schemas"]["SiibraParcellationModel"])[]
      /** Total */
      total: number
      /** Page */
      page: number
      /** Size */
      size: number
      /** Pages */
      pages?: number
    }
    /** Page[SiibraRegionalConnectivityModel] */
    Page_SiibraRegionalConnectivityModel_: {
      /** Items */
      items: (components["schemas"]["SiibraRegionalConnectivityModel"])[]
      /** Total */
      total: number
      /** Page */
      page: number
      /** Size */
      size: number
      /** Pages */
      pages?: number
    }
    /** Page[SiibraTabularModel] */
    Page_SiibraTabularModel_: {
      /** Items */
      items: (components["schemas"]["SiibraTabularModel"])[]
      /** Total */
      total: number
      /** Page */
      page: number
      /** Size */
      size: number
      /** Pages */
      pages?: number
    }
    /** Page[SiibraVoiModel] */
    Page_SiibraVoiModel_: {
      /** Items */
      items: (components["schemas"]["SiibraVoiModel"])[]
      /** Total */
      total: number
      /** Page */
      page: number
      /** Size */
      size: number
      /** Pages */
      pages?: number
    }
    /** Page[Union[SiibraCorticalProfileModel, SiibraReceptorDensityFp, SiibraTabularModel]] */
    Page_Union_SiibraCorticalProfileModel__SiibraReceptorDensityFp__SiibraTabularModel__: {
      /** Items */
      items: (components["schemas"]["SiibraCorticalProfileModel"] | components["schemas"]["SiibraReceptorDensityFp"] | components["schemas"]["SiibraTabularModel"])[]
      /** Total */
      total: number
      /** Page */
      page: number
      /** Size */
      size: number
      /** Pages */
      pages?: number
    }
    /** ParcellationEntityVersionModel */
    ParcellationEntityVersionModel: {
      /** @Type */
      "@type": string
      /**
       * @Context 
       * @default {
       *   "@vocab": "https://openminds.ebrains.eu/vocab/"
       * }
       */
      "@context"?: components["schemas"]["VocabModel"]
      /**
       * @Id 
       * @description Metadata node identifier.
       */
      "@id": string
      hasAnnotation?: components["schemas"]["HasAnnotation"]
      /**
       * hasParent 
       * @description Reference to a parent object or legal person.
       */
      hasParent?: (Record<string, never>)[]
      /** lookupLabel */
      lookupLabel?: string
      /**
       * name 
       * @description Word or phrase that constitutes the distinctive designation of a being or thing.
       */
      name?: string
      /**
       * ontologyIdentifier 
       * @description Term or code used to identify something or someone registered within a particular ontology.
       */
      ontologyIdentifier?: (string)[]
      /** Relationassessment */
      relationAssessment?: components["schemas"]["RelationAssessmentItem"] | components["schemas"]["RelationAssessmentItem1"]
      /**
       * versionIdentifier 
       * @description Term or code used to identify the version of something.
       */
      versionIdentifier: string
      /**
       * versionInnovation 
       * @description Documentation on what changed in comparison to a previously published form of something.
       */
      versionInnovation?: string
    }
    /** QuantitativeOverlapItem */
    QuantitativeOverlapItem: {
      /**
       * @Context 
       * @default {
       *   "@vocab": "https://openminds.ebrains.eu/vocab/"
       * }
       */
      "@context"?: components["schemas"]["VocabModel"]
      /**
       * typeOfUncertainty 
       * @description Distinct technique used to quantify the uncertainty of a measurement.
       */
      typeOfUncertainty?: Record<string, never>
      /**
       * uncertainty 
       * @description Quantitative value range defining the uncertainty of a measurement.
       */
      uncertainty?: (number)[]
      /**
       * unit 
       * @description Determinate quantity adopted as a standard of measurement.
       */
      unit?: Record<string, never>
      /**
       * value 
       * @description Entry for a property.
       */
      value: number
    }
    /** QuantitativeOverlapItem1 */
    QuantitativeOverlapItem1: {
      /**
       * @Context 
       * @default {
       *   "@vocab": "https://openminds.ebrains.eu/vocab/"
       * }
       */
      "@context"?: components["schemas"]["VocabModel"]
      /**
       * maxValue 
       * @description Greatest quantity attained or allowed.
       */
      maxValue: number
      /** maxValueUnit */
      maxValueUnit?: Record<string, never>
      /**
       * minValue 
       * @description Smallest quantity attained or allowed.
       */
      minValue: number
      /** minValueUnit */
      minValueUnit?: Record<string, never>
    }
    /** RelationAssessmentItem */
    RelationAssessmentItem: {
      /**
       * @Context 
       * @default {
       *   "@vocab": "https://openminds.ebrains.eu/vocab/"
       * }
       */
      "@context"?: components["schemas"]["VocabModel"]
      /**
       * criteria 
       * @description Aspects or standards on which a judgement or decision is based.
       */
      criteria?: Record<string, never>
      /**
       * inRelationTo 
       * @description Reference to a related element.
       */
      inRelationTo: Record<string, never>
      /**
       * qualitativeOverlap 
       * @description Semantic characterization of how much two things occupy the same space.
       */
      qualitativeOverlap: Record<string, never>
    }
    /** RelationAssessmentItem1 */
    RelationAssessmentItem1: {
      /**
       * @Context 
       * @default {
       *   "@vocab": "https://openminds.ebrains.eu/vocab/"
       * }
       */
      "@context"?: components["schemas"]["VocabModel"]
      /**
       * criteria 
       * @description Aspects or standards on which a judgement or decision is based.
       */
      criteria?: Record<string, never>
      /**
       * inRelationTo 
       * @description Reference to a related element.
       */
      inRelationTo: Record<string, never>
      /** Quantitativeoverlap */
      quantitativeOverlap: components["schemas"]["QuantitativeOverlapItem"] | components["schemas"]["QuantitativeOverlapItem1"]
    }
    /** SiibraAnchorModel */
    SiibraAnchorModel: {
      /** @Type */
      "@type": string
      location?: components["schemas"]["LocationModel"]
      /** Regions */
      regions: (components["schemas"]["SiibraRegionAssignmentQual"])[]
    }
    /** SiibraAtIdModel */
    SiibraAtIdModel: {
      /** @Id */
      "@id": string
    }
    /** SiibraAtlasModel */
    SiibraAtlasModel: {
      /** @Type */
      "@type": string
      /** @Id */
      "@id": string
      /** Name */
      name: string
      /** Spaces */
      spaces: (components["schemas"]["SiibraAtIdModel"])[]
      /** Parcellations */
      parcellations: (components["schemas"]["SiibraAtIdModel"])[]
      /** Species */
      species: string
    }
    /** SiibraCorticalProfileModel */
    SiibraCorticalProfileModel: {
      /** @Type */
      "@type": string
      /** Id */
      id: string
      /** Modality */
      modality: string
      /** Category */
      category: string
      /** Description */
      description: string
      /** Name */
      name: string
      /** Datasets */
      datasets: (components["schemas"]["EbrainsDatasetModel"])[]
      anchor?: components["schemas"]["SiibraAnchorModel"]
      data?: components["schemas"]["DataFrameModel"]
      /** Unit */
      unit?: string
      /** Boundary Positions */
      boundary_positions: {
        [key: string]: number | undefined
      }
      /** Boundaries Mapped */
      boundaries_mapped: boolean
    }
    /** SiibraEbrainsDataFeatureModel */
    SiibraEbrainsDataFeatureModel: {
      /** @Type */
      "@type": string
      /** Id */
      id: string
      /** Modality */
      modality: string
      /** Category */
      category: string
      /** Description */
      description: string
      /** Name */
      name: string
      /** Datasets */
      datasets: (components["schemas"]["EbrainsDatasetModel"])[]
      anchor?: components["schemas"]["SiibraAnchorModel"]
    }
    /** SiibraParcellationModel */
    SiibraParcellationModel: {
      /** @Type */
      "@type": string
      /** @Id */
      "@id": string
      /** Name */
      name: string
      /** Modality */
      modality?: string
      /** Datasets */
      datasets: (components["schemas"]["EbrainsDatasetModel"])[]
      /** Brainatlasversions */
      brainAtlasVersions: (components["schemas"]["BrainAtlasVersionModel"])[]
      version?: components["schemas"]["SiibraParcellationVersionModel"]
    }
    /** SiibraParcellationVersionModel */
    SiibraParcellationVersionModel: {
      /** @Type */
      "@type": string
      /** Name */
      name: string
      /** Deprecated */
      deprecated?: boolean
      prev?: components["schemas"]["SiibraAtIdModel"]
      next?: components["schemas"]["SiibraAtIdModel"]
    }
    /** SiibraPublication */
    SiibraPublication: {
      /** @Type */
      "@type": string
      /** Citation */
      citation: string
      /** Url */
      url: string
    }
    /** SiibraReceptorDensityFp */
    SiibraReceptorDensityFp: {
      /** @Type */
      "@type": string
      /** Id */
      id: string
      /** Modality */
      modality: string
      /** Category */
      category: string
      /** Description */
      description: string
      /** Name */
      name: string
      /** Datasets */
      datasets: (components["schemas"]["EbrainsDatasetModel"])[]
      anchor?: components["schemas"]["SiibraAnchorModel"]
      data?: components["schemas"]["DataFrameModel"]
      /** Neurotransmitters */
      neurotransmitters?: (string)[]
      /** Receptors */
      receptors?: (string)[]
    }
    /** SiibraRegionAssignmentQual */
    SiibraRegionAssignmentQual: {
      /** @Type */
      "@type": string
      region: components["schemas"]["ParcellationEntityVersionModel"]
      /** Qualification */
      qualification: string
    }
    /** SiibraRegionalConnectivityModel */
    SiibraRegionalConnectivityModel: {
      /** @Type */
      "@type": string
      /** Id */
      id: string
      /** Modality */
      modality: string
      /** Category */
      category: string
      /** Description */
      description: string
      /** Name */
      name: string
      /** Datasets */
      datasets: (components["schemas"]["EbrainsDatasetModel"])[]
      anchor?: components["schemas"]["SiibraAnchorModel"]
      /** Cohort */
      cohort: string
      /** Subjects */
      subjects: (string)[]
      /** Matrices */
      matrices?: {
        [key: string]: components["schemas"]["DataFrameModel"] | undefined
      }
    }
    /** SiibraTabularModel */
    SiibraTabularModel: {
      /** @Type */
      "@type": string
      /** Id */
      id: string
      /** Modality */
      modality: string
      /** Category */
      category: string
      /** Description */
      description: string
      /** Name */
      name: string
      /** Datasets */
      datasets: (components["schemas"]["EbrainsDatasetModel"])[]
      anchor?: components["schemas"]["SiibraAnchorModel"]
      data?: components["schemas"]["DataFrameModel"]
    }
    /** SiibraVoiModel */
    SiibraVoiModel: {
      /** @Type */
      "@type": string
      /** Id */
      id: string
      /** Modality */
      modality: string
      /** Category */
      category: string
      /** Description */
      description: string
      /** Name */
      name: string
      /** Datasets */
      datasets: (components["schemas"]["EbrainsDatasetModel"])[]
      anchor?: components["schemas"]["SiibraAnchorModel"]
      volume: components["schemas"]["VolumeModel"]
      boundingbox: components["schemas"]["BoundingBoxModel"]
    }
    /** StatisticModelInfo */
    StatisticModelInfo: {
      /** Min */
      min: number
      /** Max */
      max: number
    }
    /**
     * TabularTypes 
     * @description An enumeration. 
     * @enum {unknown}
     */
    TabularTypes: "ReceptorDensityFingerprint" | "LayerwiseBigBrainIntensities" | "LayerwiseCellDensity"
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[]
      /** Message */
      msg: string
      /** Error Type */
      type: string
    }
    /** VocabModel */
    VocabModel: {
      /** @Vocab */
      "@vocab": string
    }
    /** VolumeModel */
    VolumeModel: {
      /** @Type */
      "@type": string
      /** Name */
      name: string
      /** Formats */
      formats: (string)[]
      /** Providesmesh */
      providesMesh: boolean
      /** Providesimage */
      providesImage: boolean
      /** Fragments */
      fragments: {
        [key: string]: (string)[] | undefined
      }
      /** Variant */
      variant?: string
      /** Providedvolumes */
      providedVolumes: {
        [key: string]: (string | ({
          [key: string]: string | undefined
        })) | undefined
      }
      space: components["schemas"]["SiibraAtIdModel"]
      /** Datasets */
      datasets: (components["schemas"]["EbrainsDatasetModel"])[]
    }
    /** Coordinates */
    api__models__openminds__SANDS__v3__atlas__parcellationEntityVersion__Coordinates: {
      /**
       * @Context 
       * @default {
       *   "@vocab": "https://openminds.ebrains.eu/vocab/"
       * }
       */
      "@context"?: components["schemas"]["VocabModel"]
      /**
       * typeOfUncertainty 
       * @description Distinct technique used to quantify the uncertainty of a measurement.
       */
      typeOfUncertainty?: Record<string, never>
      /**
       * uncertainty 
       * @description Quantitative value range defining the uncertainty of a measurement.
       */
      uncertainty?: (number)[]
      /**
       * unit 
       * @description Determinate quantity adopted as a standard of measurement.
       */
      unit?: Record<string, never>
      /**
       * value 
       * @description Entry for a property.
       */
      value: number
    }
    /** Coordinates */
    api__models__openminds__SANDS__v3__miscellaneous__coordinatePoint__Coordinates: {
      /**
       * @Context 
       * @default {
       *   "@vocab": "https://openminds.ebrains.eu/vocab/"
       * }
       */
      "@context"?: components["schemas"]["VocabModel"]
      /**
       * typeOfUncertainty 
       * @description Distinct technique used to quantify the uncertainty of a measurement.
       */
      typeOfUncertainty?: Record<string, never>
      /**
       * uncertainty 
       * @description Quantitative value range defining the uncertainty of a measurement.
       */
      uncertainty?: (number)[]
      /**
       * unit 
       * @description Determinate quantity adopted as a standard of measurement.
       */
      unit?: Record<string, never>
      /**
       * value 
       * @description Entry for a property.
       */
      value: number
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type external = Record<string, never>;

export interface operations {

  get_all_atlases_atlases_get: {
    /** Get All Atlases */
    parameters?: {
      query?: {
        page?: number
        size?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_SiibraAtlasModel_"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_single_atlas_atlases__atlas_id__get: {
    /** Get Single Atlas */
    parameters: {
      path: {
        atlas_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SiibraAtlasModel"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_all_spaces_spaces_get: {
    /** Get All Spaces */
    parameters?: {
      query?: {
        page?: number
        size?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_CommonCoordinateSpaceModel_"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_single_space_spaces__space_id__get: {
    /** Get Single Space */
    parameters: {
      path: {
        space_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CommonCoordinateSpaceModel"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_all_parcellations_parcellations_get: {
    /** Get All Parcellations */
    parameters?: {
      query?: {
        page?: number
        size?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_SiibraParcellationModel_"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_single_parcellation_parcellations__parcellation_id__get: {
    /** Get Single Parcellation */
    parameters: {
      path: {
        parcellation_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SiibraParcellationModel"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_all_regions_regions_get: {
    /** Get All Regions */
    parameters: {
      query: {
        parcellation_id: string
        page?: number
        size?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_ParcellationEntityVersionModel_"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_all_regions_regions__region_id__get: {
    /** Get All Regions */
    parameters: {
      query: {
        parcellation_id: string
        space_id: string
      }
      path: {
        region_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ParcellationEntityVersionModel"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  route_get_map_map_get: {
    /** Route Get Map */
    parameters: {
      query: {
        parcellation_id: string
        space_id: string
        map_type: components["schemas"]["MapType"]
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MapModel"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  route_get_parcellation_labelled_map_map_labelled_map_nii_gz_get: {
    /**
     * Route Get Parcellation Labelled Map 
     * @description Returns a labelled map if region_id is not provided.
     * 
     * Returns a mask if a region_id is provided.
     * 
     * region_id MAY refer to ANY region on the region hierarchy, and a combined mask will be returned.
     */
    parameters: {
      query: {
        parcellation_id: string
        space_id: string
        region_id?: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: never
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  route_get_region_statistical_map_map_statistical_map_nii_gz_get: {
    /**
     * Route Get Region Statistical Map 
     * @description Returns a statistic map.
     * 
     * region_id MUST refer to leaf region on the region hierarchy.
     */
    parameters: {
      query: {
        parcellation_id: string
        space_id: string
        region_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: never
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  route_get_region_statistical_map_map_statistical_map_info_json_get: {
    /** Route Get Region Statistical Map */
    parameters: {
      query: {
        parcellation_id: string
        space_id: string
        region_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StatisticModelInfo"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_all_feature_types_feature__types_get: {
    /** Get All Feature Types */
    parameters?: {
      query?: {
        page?: number
        size?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_FeatureMetaModel_"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_all_connectivity_features_feature_RegionalConnectivity_get: {
    /** Get All Connectivity Features */
    parameters: {
      query: {
        parcellation_id: string
        type?: components["schemas"]["ConnectivityTypes"]
        page?: number
        size?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_SiibraRegionalConnectivityModel_"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_single_connectivity_feature_feature_RegionalConnectivity__feature_id__get: {
    /**
     * Get Single Connectivity Feature 
     * @description subject is an optional param.
     * If provided, the specific matrix will be return.
     * If not provided, the matrix averaged between subjects will be returned under the key _average.
     */
    parameters: {
      query: {
        parcellation_id: string
        subject?: string
        type?: components["schemas"]["ConnectivityTypes"]
      }
      path: {
        feature_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SiibraRegionalConnectivityModel"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_all_connectivity_features_feature_CorticalProfile_get: {
    /** Get All Connectivity Features */
    parameters: {
      query: {
        parcellation_id: string
        region_id: string
        type?: components["schemas"]["CorticalProfileTypes"]
        page?: number
        size?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_SiibraCorticalProfileModel_"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_single_connectivity_feature_feature_CorticalProfile__feature_id__get: {
    /** Get Single Connectivity Feature */
    parameters: {
      query: {
        parcellation_id: string
        region_id: string
        type?: components["schemas"]["CorticalProfileTypes"]
      }
      path: {
        feature_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SiibraCorticalProfileModel"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_all_tabular_feature_Tabular_get: {
    /** Get All Tabular */
    parameters: {
      query: {
        parcellation_id: string
        region_id: string
        type?: components["schemas"]["TabularTypes"]
        page?: number
        size?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_Union_SiibraCorticalProfileModel__SiibraReceptorDensityFp__SiibraTabularModel__"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_single_tabular_feature_Tabular__feature_id__get: {
    /** Get Single Tabular */
    parameters: {
      query: {
        parcellation_id: string
        region_id: string
        type?: components["schemas"]["TabularTypes"]
      }
      path: {
        feature_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SiibraCorticalProfileModel"] | components["schemas"]["SiibraReceptorDensityFp"] | components["schemas"]["SiibraTabularModel"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_all_voi_feature_Image_get: {
    /** Get All Voi */
    parameters: {
      query: {
        space_id: string
        bbox?: string
        type?: components["schemas"]["ImageTypes"]
        page?: number
        size?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_SiibraVoiModel_"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_single_voi_feature_Image__feature_id__get: {
    /** Get Single Voi */
    parameters: {
      query: {
        space_id: string
        type?: components["schemas"]["ImageTypes"]
      }
      path: {
        feature_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SiibraVoiModel"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_all_gene_feature_GeneExpressions_get: {
    /** Get All Gene */
    parameters: {
      query: {
        parcellation_id: string
        region_id: string
        gene: string
        page?: number
        size?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_SiibraTabularModel_"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_single_gene_feature_GeneExpressions__feature_id__get: {
    /** Get Single Gene */
    parameters: {
      query: {
        parcellation_id: string
        region_id: string
        gene: string
      }
      path: {
        feature_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SiibraTabularModel"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_all_ebrains_df_feature_EbrainsDataFeature_get: {
    /** Get All Ebrains Df */
    parameters: {
      query: {
        parcellation_id: string
        region_id: string
        page?: number
        size?: number
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Page_SiibraEbrainsDataFeatureModel_"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_single_ebrains_df_feature_EbrainsDataFeature__feature_id__get: {
    /** Get Single Ebrains Df */
    parameters: {
      query: {
        parcellation_id: string
        region_id: string
      }
      path: {
        feature_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SiibraEbrainsDataFeatureModel"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
  get_single_feature_feature__feature_id__get: {
    /**
     * Get Single Feature 
     * @description This endpoint allows detail of a single feature to be fetched, without the necessary context. However, the tradeoff for this endpoint is:
     * 
     * - the endpoint typing is the union of all possible return types
     * - the client needs to supply any necessary query param (e.g. subject for regional connectivity, gene for gene expression etc)
     */
    parameters: {
      path: {
        feature_id: string
      }
    }
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SiibraVoiModel"] | components["schemas"]["SiibraCorticalProfileModel"] | components["schemas"]["SiibraRegionalConnectivityModel"] | components["schemas"]["SiibraReceptorDensityFp"] | components["schemas"]["SiibraTabularModel"] | components["schemas"]["SiibraEbrainsDataFeatureModel"]
        }
      }
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"]
        }
      }
    }
  }
}
