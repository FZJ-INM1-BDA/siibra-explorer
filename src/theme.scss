@use 'sass:map';
@use '@angular/material' as mat;

@include mat.core();

$themes: "default", "ebrains";
$themes-map: (
  "default": (
    "primary": mat.define-palette(mat.$indigo-palette, 400),
    "accent": mat.define-palette(mat.$amber-palette, A200, A100, A400),
    "warn": mat.define-palette(mat.$red-palette),
  ),
  "ebrains": (
    "primary": mat.define-palette(mat.$green-palette, 400),
    "accent": mat.define-palette(mat.$yellow-palette, A200, A100, A400),
    "warn": mat.define-palette(mat.$red-palette),
  )
);

$sxplr-primary: mat.define-palette(mat.$indigo-palette, 400);
$sxplr-accent: mat.define-palette(mat.$amber-palette, A200, A100, A400);
$sxplr-warn: mat.define-palette(mat.$red-palette);

$typographic-config: mat.define-typography-config();

// Include the theme mixins for other components you use here.
// TODO(v15): As of v15 mat.legacy-core no longer includes default typography styles.
//  The following line adds:
//    1. Default typography styles for all components
//    2. Styles for typography hierarchy classes (e.g. .mat-headline-1)
//  If you specify typography styles for the components you use elsewhere, you should delete this line.
//  If you don't need the default component typographies but still want the hierarchy styles,
//  you can delete this line and instead use:
//    `@include mat.legacy-typography-hierarchy(mat.define-legacy-typography-config());`

@mixin custom-cmp($theme) {
  $color-config: mat.get-color-config($theme);

  $foreground: map-get($theme, foreground);
  $background: map-get($theme, background);

  $primary: map-get($color-config, primary);
  $accent: map-get($color-config, accent);
  $warn: map-get($color-config, warn);

  color: mat.get-color-from-palette($foreground, text);

  [sxplr-custom-cmp],
  .sxplr-custom-cmp
  {
    
    &.hoverable
    {
      padding: 1rem 1.3rem;
      &:hover
      {
        cursor: pointer;
        background-color: mat.get-color-from-palette($background, 100);
      }
    }

    &[target="_blank"]
    {
      // TODO it seems unicode does not have an external link character.
      // will have to use SVG as background image or something

      // &::after
      // {
      //   content: "";
      //   display: inline-block;
        
      // }
    }

    &[card],
    &.card
    {
      padding: 0 1em 0 1.5em;
      border-radius: 0.25em;
    }

    &[bg],
    &.bg
    {
      background-color: mat.get-color-from-palette($background, background);
    }

    &[darker-bg],
    &.darker-bg
    {
      background-color: mat.get-color-from-palette($background, background);
    }

    &[text],
    &.text
    {
      color: mat.get-color-from-palette($foreground, text);
    }
    &[primary],
    &.primary
    {
      color: mat.get-color-from-palette($primary, 500);
    }

    &[accent],
    &.accent
    {
      color: mat.get-color-from-palette($accent, 500);
    }

    &[warn],
    &.warn
    {
      color: mat.get-color-from-palette($warn, 500);
    }
  }
}

@each $theme in $themes {
  $palette-map: map-get($themes-map, $theme);
  
  $sxplr-light-theme: mat.define-light-theme((
    color: (
      primary: map-get($palette-map, "primary"),
      accent: map-get($palette-map, "accent"),
      warn: map-get($palette-map, "warn"),
    ),
    typography: $typographic-config,
    density: 0,
  ));
  
  // Define a dark theme
  $sxplr-dark-theme: mat.define-dark-theme((
    color: (
      primary: map-get($palette-map, "primary"),
      accent: map-get($palette-map, "accent"),
      warn: map-get($palette-map, "warn"),
    ),
    typography: $typographic-config,
    density: 0,
  ));
  
  [theme="#{$theme}"]
  { 
    /**
      * attribute has lower priority than class
      * by default, use attribute to set UI wide theme
      * use class for specific localised theme 
      */

    &[darktheme=true],
    [darktheme=true],
    .darktheme.darktheme
    {
      @include mat.all-component-themes($sxplr-dark-theme);
      @include custom-cmp($sxplr-dark-theme);
      input[type="text"],textarea
      {
        caret-color: white!important;
      }
    
      // somehow, unthemed variables did not get included
      // TODO fix?
      --mdc-filled-button-label-text-color: #fff;
      --mdc-text-button-label-text-color: #fff;
    }
    
    &[darktheme=false],
    [darktheme=false],
    .lighttheme.lighttheme
    {
      @include mat.all-component-themes($sxplr-light-theme);
      @include custom-cmp($sxplr-light-theme);
      input[type="text"]
      {
        caret-color: black!important;
      }
    }
  }
  
}
