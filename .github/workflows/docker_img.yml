name: '[ci/cd] build docker image/trigger deploy/check VIP urls'

on:
  push:
    branches:
      - "master"
      - "staging"
    # do not rebuild if...
    paths-ignore:
      # docs (docs are built on readthedocs any way)
      - 'docs/**/*'

jobs:
  set-vars:
    runs-on: ubuntu-latest
    outputs:
      GIT_DIGEST: ${{ steps.set-vars-step.outputs.GIT_DIGEST }}
      BRANCH_NAME: ${{ steps.set-vars-step.outputs.BRANCH_NAME }}
      BUILD_TEXT: ${{ steps.set-vars-step.outputs.BUILD_TEXT }}
      DEPLOY_ID: ${{ steps.set-vars-step.outputs.DEPLOY_ID }}
      SXPLR_VERSION: ${{ steps.set-vars-step.outputs.SXPLR_VERSION }}
      EXPERIMENTAL_FEATURE_FLAG: ${{ steps.set-vars-step.outputs.EXPERIMENTAL_FEATURE_FLAG }}
    steps:
    - uses: actions/checkout@v4
    - id: 'set-vars-step'
      name: Set variables
      run: |
        GIT_DIGEST=${{ github.sha }}
        echo "Git digest: $GIT_DIGEST"
        GIT_DIGEST=$(echo $GIT_DIGEST | grep -oP '^.{6}')
        echo "Using first 6 chars of hash: $GIT_DIGEST"
        echo "GIT_DIGEST=$GIT_DIGEST" >> $GITHUB_OUTPUT
        
        echo "Using github.ref: $GITHUB_REF"

        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT

        echo "Branch is $BRANCH_NAME ."

        if [[ "$BRANCH_NAME" == 'master' ]]
        then
          echo "BUILD_TEXT=" >> $GITHUB_OUTPUT
        else
          echo "BUILD_TEXT=$BRANCH_NAME" >> $GITHUB_OUTPUT
        fi

        # DEPLOY_ID == remove _ / and lowercase everything from branch
        DEPLOY_ID=$(echo ${BRANCH_NAME//[_\/]/} | awk '{ print tolower($0) }')
        echo "DEPLOY_ID=$DEPLOY_ID" >> $GITHUB_OUTPUT

        SXPLR_VERSION=$(jq -r '.version' package.json)
        echo "SXPLR_VERSION=$SXPLR_VERSION"
        echo "SXPLR_VERSION=$SXPLR_VERSION" >> $GITHUB_OUTPUT

        if [[ "$GITHUB_REF" == 'refs/heads/master' ]] || [[ "$GITHUB_REF" == 'refs/heads/staging' ]]
        then
          echo "prod/staging build, do not enable experimental features"
        else
          echo "dev bulid, enable experimental features"
          echo "EXPERIMENTAL_FEATURE_FLAG=true" >> $GITHUB_OUTPUT
        fi


  build-docker-img-ghcr:

    runs-on: ubuntu-latest
    needs:
    - set-vars

    env:
      MATOMO_ID: '12'
      MATOMO_URL: 'https://stats.humanbrainproject.eu/'
      PRODUCTION: 'true'
      SIIBRA_API_STABLE: 'https://siibra-api-stable.apps.hbp.eu/v3_0,https://siibra-api.apps.ebrains.eu/v3_0'
      REGISTRY: ghcr.io

      # https://github.com/orgs/community/discussions/10553#discussioncomment-10538593
      # IMAGE_NAME: ${{ github.repository }}
      IMAGE_NAME: fzj-inm1-bda/siibra-explorer
      GIT_DIGEST: ${{ needs.set-vars.outputs.GIT_DIGEST }}
      BRANCH_NAME: ${{ needs.set-vars.outputs.BRANCH_NAME }}
      EXPERIMENTAL_FEATURE_FLAG: ${{ needs.set-vars.outputs.EXPERIMENTAL_FEATURE_FLAG }}

    permissions:
      contents: read
      packages: write
      # attestations: write
      id-token: write

    steps:
    - uses: actions/checkout@v4
    - name: Log in to the Container registry
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_NAME }}
        build-args: |
          BUILD_HASH=${{ env.GIT_DIGEST }}
          MATOMO_URL=${{ env.MATOMO_URL }}
          MATOMO_ID=${{ env.MATOMO_ID }}
          SIIBRA_API_ENDPOINTS=${{ env.SIIBRA_API_STABLE }}
          EXPERIMENTAL_FEATURE_FLAG=${{ env.EXPERIMENTAL_FEATURE_FLAG }}

  
  build-docker-img-ebrains:
  
    permissions:
      contents: read
      packages: write
      # attestations: write
      id-token: write

    runs-on: ubuntu-latest
    needs:
    - set-vars
    env:
      MATOMO_ID: '12'
      MATOMO_URL: 'https://stats.humanbrainproject.eu/'
      PRODUCTION: 'true'
      DOCKER_REGISTRY: 'docker-registry.ebrains.eu/siibra/'

      SIIBRA_API_STABLE: 'https://siibra-api-stable.apps.hbp.eu/v3_0,https://siibra-api.apps.ebrains.eu/v3_0'
      SIIBRA_API_RC: 'https://siibra-api-rc.apps.hbp.eu/v3_0'
      SIIBRA_API_LATEST: 'https://siibra-api-latest.apps-dev.hbp.eu/v3_0'
      GIT_DIGEST: ${{ needs.set-vars.outputs.GIT_DIGEST }}
      BRANCH_NAME: ${{ needs.set-vars.outputs.BRANCH_NAME }}
      EXPERIMENTAL_FEATURE_FLAG: ${{ needs.set-vars.outputs.EXPERIMENTAL_FEATURE_FLAG }}

    steps:
    - uses: actions/checkout@v4
    - id: 'build-docker-image'
      name: 'Build docker image'
      run: |

        echo "Git digest: ${{ env.GIT_DIGEST}} "

        DOCKER_BUILT_TAG=${{ env.DOCKER_REGISTRY }}siibra-explorer:$BRANCH_NAME
        echo "Building $DOCKER_BUILT_TAG"
        docker build \
          --build-arg BUILD_HASH=${{ env.GIT_DIGEST }} \
          --build-arg MATOMO_URL=${{ env.MATOMO_URL }} \
          --build-arg MATOMO_ID=${{ env.MATOMO_ID }} \
          --build-arg SIIBRA_API_ENDPOINTS=${{ env.SIIBRA_API_STABLE }} \
          --build-arg EXPERIMENTAL_FEATURE_FLAG=${{ env.EXPERIMENTAL_FEATURE_FLAG }} \
          -t $DOCKER_BUILT_TAG \
          .
        echo "Successfully built $DOCKER_BUILT_TAG"
        echo "DOCKER_BUILT_TAG=$DOCKER_BUILT_TAG" >> $GITHUB_ENV

        inspect_str=$(docker image inspect --format='json' $DOCKER_BUILT_TAG)
        echo "Inspected tag: $inspect_str"

    - name: 'Push to docker registry'
      run: |
        echo "Login to docker registry"
        docker login \
          -u '${{ secrets.EBRAINS_DOCKER_REG_USER }}' \
          -p '${{ secrets.EBRAINS_DOCKER_REG_TOKEN }}' \
          docker-registry.ebrains.eu
        echo "Pushing $DOCKER_BUILT_TAG"
        docker push $DOCKER_BUILT_TAG
    - name: 'If master, also tag as per package.json'
      if: ${{ github.ref == 'refs/heads/master' }}
      run: |
        VERSION=$(jq -r '.version' package.json)
        VERSIONED_DOCKER_BUILT_TAG=${{ env.DOCKER_REGISTRY }}siibra-explorer:$VERSION
        docker tag $DOCKER_BUILT_TAG $VERSIONED_DOCKER_BUILT_TAG
        docker push $VERSIONED_DOCKER_BUILT_TAG

  trigger-deploy-rc-rancher:
    if: ${{ needs.set-vars.outputs.BRANCH_NAME == 'staging' && success() }}
    needs:
      - build-docker-img-ebrains
      - set-vars
    uses: ./.github/workflows/deploy-helm.yml
    with:
      DEPLOYMENT_NAME: rc
      IMAGE_TAG: staging

      # GIT_DIGEST may (sometimes) be all numbers. prepend 'h' to cast to str
      IMAGE_DIGEST: h${{ needs.set-vars.outputs.GIT_DIGEST }}
    secrets:
      KUBECONFIG: ${{ secrets.KUBECONFIG }}

  cypress-staging-viewer:
    
    needs:
    - trigger-deploy-rc-rancher
    - set-vars
    strategy:
      fail-fast: false
      matrix:
        os: 
        - ubuntu-latest
        # - windows-latest
        - macos-latest
        viewer:
        - ng
        - fsa
        browser:
        - chrome
        - webkit
        include:
        - viewer: ng
          saneurl: human
        - viewer: fsa
          saneurl: fsaverage
        exclude:
        - os: ubuntu-latest
          browser: webkit
        # - os: windows-latest
        #   browser: webkit
    uses: ./.github/workflows/_screenshot.yml
    with:
      url: https://atlases.ebrains.eu/viewer-staging/go/${{ matrix.saneurl }}
      screenshot-filename: ${{ needs.set-vars.outputs.GIT_DIGEST }}/viewer-preview/${{ matrix.viewer }}_${{ matrix.os }}_${{ matrix.browser }}
    secrets:
      client-id: ${{ secrets.EBRAINS_SIIBRA_EXPLORER_OIDC_CLIENTID}}
      client-secret: ${{ secrets.EBRAINS_SIIBRA_EXPLORER_OIDC_CLIENTSECRET}}

  cypress-staging-url:
    needs:
    - trigger-deploy-rc-rancher
    - set-vars
    strategy:
      fail-fast: false
      matrix:
        saneurl:
        - siibra_paper_2023_2A
        - siibra_paper_2023_2B
        - siibra_paper_2023_2C
        - siibra_paper_2023_2D
        - siibra_paper_2023_2E
        - siibra_paper_2023_2F
    uses: ./.github/workflows/_screenshot.yml
    with:
      url: https://atlases.ebrains.eu/viewer-staging/go/${{ matrix.saneurl }}
      screenshot-filename: ${{ needs.set-vars.outputs.GIT_DIGEST }}/url-preview/${{ matrix.saneurl }}
    secrets:
      client-id: ${{ secrets.EBRAINS_SIIBRA_EXPLORER_OIDC_CLIENTID}}
      client-secret: ${{ secrets.EBRAINS_SIIBRA_EXPLORER_OIDC_CLIENTSECRET}}

  trigger-deploy-master-rancher:
    if: ${{ needs.set-vars.outputs.BRANCH_NAME == 'master' && success() }}
    needs:
      - build-docker-img-ebrains
      - set-vars
    uses: ./.github/workflows/deploy-helm.yml
    with:
      DEPLOYMENT_NAME: prod
      IMAGE_TAG: ${{ needs.set-vars.outputs.SXPLR_VERSION }}

      # GIT_DIGEST may (sometimes) be all numbers. prepend 'h' to cast to str
      IMAGE_DIGEST: h${{ needs.set-vars.outputs.GIT_DIGEST }}
    secrets:
      KUBECONFIG: ${{ secrets.KUBECONFIG }}
