name: Release CI
on:
  pull_request:
    branches:
    - master

jobs:
  check_version:
    if: always()
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: |
        MASTER_VERSION=$(git show origin/master:package.json | jq -r '.version')
        THIS_VERSION=$(jq -r '.version' < package.json)
        test "$MASTER_VERSION" == "$THIS_VERSION" && exit 1

  check_release:
    if: always()
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: |
        VERSION_NUM=$(jq -r '.version' < package.json)
        test -f docs/releases/v$VERSION_NUM.md || exit 1
  
  release_linked_mkdocs:
    if: always()
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: |
        VERSION_NUM=$(jq -r '.version' < package.json)
        echo "VERSION_NUM: $VERSION_NUM"
        cat mkdocs.yml
        GREP_VERSION_NUM=$(cat mkdocs.yml | grep $VERSION_NUM)
        echo GREP_VERSION_NUM: $GREP_VERSION_NUM
        test -z "$GREP_VERSION_NUM" && exit 1
  
  check_code_meta:
    if: always()
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: |
        VERSION_NUM=$(jq -r '.version' < package.json)
        CODEMETA_VERSION=$(jq -r '.version' < codemeta.json)
        test "$VERSION_NUM" == "$CODEMETA_VERSION" && echo "Version matches" || exit 1

        RELEASE_NOTES=$(< docs/releases/v${VERSION_NUM}.md)
        CODEMETA_RELEASE_NOTES=$(jq -r '.["schema:releaseNotes"]' codemeta.json)

        test "$RELEASE_NOTES" == "$CODEMETA_RELEASE_NOTES" || exit 1
