name: "[ci] run release checklist"
on:
  pull_request:
    branches:
    - master

jobs:
  check_version:
    if: always()
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        path: staging
        sparse-checkout: |
          package.json
    - uses: actions/checkout@v4
      with:
        ref: master
        path: master
        sparse-checkout: |
          package.json
    - run: |
        MASTER_VERSION=$(jq -r '.version' master/package.json)
        THIS_VERSION=$(jq -r '.version' staging/package.json)
        if [[ "$MASTER_VERSION" == "$THIS_VERSION" ]]
        then
          exit 1
        fi

  check_release:
    if: always()
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: |
        VERSION_NUM=$(jq -r '.version' < package.json)
        if [[ ! -f docs/releases/v$VERSION_NUM.md ]]
        then
          exit 1
        fi
  
  release_linked_mkdocs:
    if: always()
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: |
        VERSION_NUM=$(jq -r '.version' < package.json)
        echo "VERSION_NUM: $VERSION_NUM"
        cat mkdocs.yml
        GREP_VERSION_NUM=$(cat mkdocs.yml | grep $VERSION_NUM)
        echo GREP_VERSION_NUM: $GREP_VERSION_NUM
        if [[ -z "$GREP_VERSION_NUM" ]]
        then
          exit 1
        fi
        
  
  check_code_meta:
    if: always()
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: |
        VERSION_NUM=$(jq -r '.version' < package.json)
        CODEMETA_VERSION=$(jq -r '.version' < codemeta.json)
        test "$VERSION_NUM" == "$CODEMETA_VERSION" && echo "Version matches" || exit 1

        RELEASE_NOTES=$(< docs/releases/v${VERSION_NUM}.md)
        CODEMETA_RELEASE_NOTES=$(jq -r '.["schema:releaseNotes"]' codemeta.json)

        # use awk '{printf "%s\\n", $0}' docs/releases/v{VERSION}.md to fix 
        test "$RELEASE_NOTES" == "$CODEMETA_RELEASE_NOTES" && echo "Release notes matches" || exit 1
